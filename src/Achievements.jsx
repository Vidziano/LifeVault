import React, { useEffect, useState } from 'react';
import './Achievements.css';
import { useAchievement } from './AchievementContext';

function Achievements() {
  const [achievements, setAchievements] = useState([]);
  const { resetAchievements } = useAchievement();

  useEffect(() => {
    updateAchievements();
  }, []);

  const updateAchievements = () => {
    const notes = JSON.parse(localStorage.getItem('notes')) || [];
    const habits = JSON.parse(localStorage.getItem('habits')) || [];
    const moodHistory = JSON.parse(localStorage.getItem('moodHistory')) || [];
    const wishlist = JSON.parse(localStorage.getItem('wishlist')) || {};
    const calendarEvents = JSON.parse(localStorage.getItem('calendarEvents')) || {};
    const books = JSON.parse(localStorage.getItem('savedBooks')) || [];
    const movies = JSON.parse(localStorage.getItem('savedMovies')) || [];
    const dreams = JSON.parse(localStorage.getItem('dreams')) || [];
    const shopping = JSON.parse(localStorage.getItem('shoppingList')) || [];
    const inspoBoards = JSON.parse(localStorage.getItem('inspo-savedItems')) || [];

    const totalWishes = Object.values(wishlist).flat().length;
    const totalEvents = Object.values(calendarEvents).flat().length;
    const moodDays = moodHistory.length;
    const completedHabits7 = habits.filter(habit => Object.values(habit.log || {}).filter(Boolean).length >= 7).length;
    const completedHabits21 = habits.filter(habit => Object.values(habit.log || {}).filter(Boolean).length >= 21).length;
    const readBooks = books.filter(b => b.status === 'read').length;
    const watchedMovies = movies.filter(m => m.status === 'watched').length;
    const completedDreams = dreams.filter(d => d.completed).length;
    const visitedCountries = JSON.parse(localStorage.getItem('visitedCountries')) || [];

    const achievementsList = [
      { text: 'üìì –°—Ç–≤–æ—Ä–∏—Ç–∏ 1 –Ω–æ—Ç–∞—Ç–∫—É', current: notes.length, goal: 1 },
      { text: 'üìì –°—Ç–≤–æ—Ä–∏—Ç–∏ 5 –Ω–æ—Ç–∞—Ç–æ–∫', current: notes.length, goal: 5 },
      { text: 'üìì –°—Ç–≤–æ—Ä–∏—Ç–∏ 10 –Ω–æ—Ç–∞—Ç–æ–∫', current: notes.length, goal: 10 },
      { text: 'üìì –°—Ç–≤–æ—Ä–∏—Ç–∏ 50 –Ω–æ—Ç–∞—Ç–æ–∫', current: notes.length, goal: 50 },
      { text: 'üìÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ 1 –ø–æ–¥—ñ—é', current: totalEvents, goal: 1 },
      { text: 'üìÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ 10 –ø–æ–¥—ñ–π', current: totalEvents, goal: 10 },
      { text: 'üéØ –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–≤–∏—á–∫—É 1 –¥–µ–Ω—å', current: habits.some(habit => Object.values(habit.log || {}).some(v => v)) ? 1 : 0, goal: 1 },
      { text: 'üéØ –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–≤–∏—á–∫—É 7 –¥–Ω—ñ–≤', current: completedHabits7, goal: 1 },
      { text: 'üéØ –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–≤–∏—á–∫—É 21 –¥–µ–Ω—å', current: completedHabits21, goal: 1 },
      { text: 'üåà –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π 7 –¥–Ω—ñ–≤', current: moodDays, goal: 7 },
      { text: 'üåà –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π 21 –¥–µ–Ω—å', current: moodDays, goal: 21 },
      { text: 'üåà –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π 50 –¥–Ω—ñ–≤', current: moodDays, goal: 50 },
      { text: 'üåü –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–∏–π –º–∞–ª—é–Ω–æ–∫ –Ω–∞ –¥–æ—à–∫—É –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è', current: inspoBoards.length >= 1 ? 1 : 0, goal: 1 },
      { text: 'üìö –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ 5 –∫–Ω–∏–≥', current: readBooks, goal: 5 },
      { text: 'üé¨ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ 5 —Ñ—ñ–ª—å–º—ñ–≤', current: watchedMovies, goal: 5 },
      { text: 'üåà –ó–±–µ—Ä–µ–≥—Ç–∏ 5 –º—É–¥–±–æ—Ä–¥—ñ–≤', current: inspoBoards.length, goal: 5 },
      { text: 'üåà –ó–±–µ—Ä–µ–≥—Ç–∏ 10 –º—É–¥–±–æ—Ä–¥—ñ–≤', current: inspoBoards.length, goal: 10 },
      { text: 'üåç –í—ñ–¥–≤—ñ–¥–∞—Ç–∏ 1 –∫—Ä–∞—ó–Ω—É', current: visitedCountries.length, goal: 1 },
      { text: 'üåç –í—ñ–¥–≤—ñ–¥–∞—Ç–∏ 5 –∫—Ä–∞—ó–Ω', current: visitedCountries.length, goal: 5 },
      { text: 'üåç –í—ñ–¥–≤—ñ–¥–∞—Ç–∏ 10 –∫—Ä–∞—ó–Ω', current: visitedCountries.length, goal: 10 },
      { text: '‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏ 1 –º—Ä—ñ—é', current: completedDreams, goal: 1 },
      { text: '‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏ 5 –º—Ä—ñ–π', current: completedDreams, goal: 5 },
      { text: '‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏ 10 –º—Ä—ñ–π', current: completedDreams, goal: 10 },
      { text: 'üõí –î–æ–¥–∞—Ç–∏ 10 –±–∞–∂–∞–Ω—å —É —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', current: shopping.length, goal: 10 },
      { text: 'üõí –î–æ–¥–∞—Ç–∏ 25 –±–∞–∂–∞–Ω—å —É —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', current: shopping.length, goal: 25 },
      { text: 'üõí –î–æ–¥–∞—Ç–∏ 50 –±–∞–∂–∞–Ω—å —É —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', current: shopping.length, goal: 50 },
    ];

    localStorage.setItem('achievementsState', JSON.stringify(achievementsList));
    setAchievements(achievementsList);
  };

  const storedProgress = JSON.parse(localStorage.getItem('achievementsProgress')) || {};
  const total = achievements.length;
  const completed = achievements.filter(a => storedProgress[a.text]).length;
  const progress = total > 0 ? Math.round((completed / total) * 100) : 0;

  return (
    <div className="achievements-wrapper">
      <h2>üèÜ –ù–∞–≥–æ—Ä–æ–¥–∏</h2>

      <button className="reset-button" onClick={resetAchievements}>üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å</button>

      <div className="progress-summary">
        –ü—Ä–æ–≥—Ä–µ—Å: {completed}/{total} ({progress}%)
        <div className="progress-bar">
          <div className="progress-fill" style={{ width: `${progress}%` }}></div>
        </div>
      </div>

      <ul className="achievements-list">
        {achievements.map((achieve, idx) => {
          const done = storedProgress[achieve.text];
          const individualProgress = Math.min(Math.round((achieve.current / achieve.goal) * 100), 100);

          return (
            <li key={idx} className={`${done ? 'achieved animate' : 'locked'}`}>
              <div className="achievement-text">{achieve.text}</div>
              <div className="achievement-progress">
                {achieve.current}/{achieve.goal} ({individualProgress}%)
              </div>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

export default Achievements;
