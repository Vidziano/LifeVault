import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import Dreams from '../Dreams';

// –ú–æ–∫–∏ –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤, —è–∫—ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤ —é–Ω—ñ—Ç-—Ç–µ—Å—Ç–∞—Ö
jest.mock('../DreamChart', () => () => <div data-testid="chart-placeholder" />);
jest.mock('../DreamReflections', () => () => <div data-testid="reflections-placeholder" />);
jest.mock('../DreamDetails', () => () => <div data-testid="details-placeholder" />);

// –ó–∞–≥–ª—É—à–∫–∞ scrollIntoView –¥–ª—è jsdom
beforeAll(() => {
  window.HTMLElement.prototype.scrollIntoView = () => {};
});

// –û—á–∏—â–µ–Ω–Ω—è localStorage –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º
beforeEach(() => {
  localStorage.clear();
});

test('–¥–æ–¥–∞—î –º—Ä—ñ—é –∑ —É—Å—ñ–º–∞ –ø–æ–ª—è–º–∏', async () => {
  render(<Dreams />);

  fireEvent.change(screen.getByPlaceholderText('–ù–∞–∑–≤–∞ –º—Ä—ñ—ó'), {
    target: { value: '–ú–æ—è –º—Ä—ñ—è' }
  });

  fireEvent.change(screen.getByPlaceholderText('–ü–ª–∞–Ω –¥—ñ–π'), {
    target: { value: '–î–æ—Å—è–≥—Ç–∏ –º–µ—Ç–∏' }
  });

  fireEvent.change(screen.getByPlaceholderText('–ö—Ä–æ–∫ 1'), {
    target: { value: '–†–æ–∑–ø–æ—á–∞—Ç–∏' }
  });

  fireEvent.change(screen.getByPlaceholderText('–ß–æ–º—É —Ü—è –º—Ä—ñ—è –≤–∞–∂–ª–∏–≤–∞?'), {
    target: { value: '–ë–æ —Ü–µ –º–æ—è —Ü—ñ–ª—å' }
  });

  fireEvent.click(screen.getByText('üí´ –î–æ–¥–∞—Ç–∏ –º—Ä—ñ—é'));

  expect(await screen.findByText('–ú–æ—è –º—Ä—ñ—è')).toBeInTheDocument();
});

test('–Ω–µ –¥–æ–¥–∞—î –º—Ä—ñ—é –±–µ–∑ –∂–æ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É', () => {
  render(<Dreams />);
  fireEvent.click(screen.getByText('üí´ –î–æ–¥–∞—Ç–∏ –º—Ä—ñ—é'));
  expect(screen.getByText(/‚ö†Ô∏è –î–æ–¥–∞–π —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫—Ä–æ–∫/i)).toBeInTheDocument();
});

test('—Ä–µ–¥–∞–≥—É—î –º—Ä—ñ—é —ñ –∑–±–µ—Ä—ñ–≥–∞—î –∑–º—ñ–Ω–∏', async () => {
  const mockDream = [{
    id: 1,
    title: '–°—Ç–∞—Ä–∞ –º—Ä—ñ—è',
    sphere: '–æ—Å–æ–±–∏—Å—Ç–µ',
    plan: '–ü–ª–∞–Ω',
    steps: ['–ö—Ä–æ–∫ 1'],
    completed: false,
    story: '',
    futureVision: '',
    reason: '',
    pinned: false,
    favorite: false,
    created: new Date().toLocaleString()
  }];
  localStorage.setItem('dreams', JSON.stringify(mockDream));

  render(<Dreams />);

  expect(await screen.findByText('–°—Ç–∞—Ä–∞ –º—Ä—ñ—è')).toBeInTheDocument();

  const editButton = screen.getAllByText('‚úèÔ∏è')[0];
  fireEvent.click(editButton);

  const titleInput = await screen.findByDisplayValue('–°—Ç–∞—Ä–∞ –º—Ä—ñ—è');
  fireEvent.change(titleInput, { target: { value: '–û–Ω–æ–≤–ª–µ–Ω–∞ –º—Ä—ñ—è' } });

  fireEvent.click(screen.getByText('‚úèÔ∏è –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏'));

  expect(await screen.findByText('–û–Ω–æ–≤–ª–µ–Ω–∞ –º—Ä—ñ—è')).toBeInTheDocument();

  const saved = JSON.parse(localStorage.getItem('dreams'));
  console.log('üß™ Saved dreams in LS:', saved);
  expect(saved[0].title).toBe('–û–Ω–æ–≤–ª–µ–Ω–∞ –º—Ä—ñ—è');
});

test('–≤–∏–¥–∞–ª—è—î –º—Ä—ñ—é', async () => {
  const mockDream = [{
    id: 2,
    title: '–ú—Ä—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è',
    sphere: '–∫–∞—Ä‚Äô—î—Ä–∞',
    plan: '',
    steps: [''],
    completed: false,
    story: '',
    futureVision: '',
    reason: '',
    pinned: false,
    favorite: false,
    created: new Date().toLocaleString()
  }];
  localStorage.setItem('dreams', JSON.stringify(mockDream));

  render(<Dreams />);

  fireEvent.click(await screen.findByText('üóëÔ∏è'));

  await waitFor(() => {
    expect(screen.queryByText('–ú—Ä—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è')).not.toBeInTheDocument();
  });
});
