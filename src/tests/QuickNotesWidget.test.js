import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { act } from 'react';
import QuickNotesWidget from '../QuickNotesWidget';

beforeEach(() => {
  localStorage.clear();
  window.dispatchEvent(new Event('storage'));
});

test('–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –∫–Ω–æ–ø–∫—É üóíÔ∏è', () => {
  render(<QuickNotesWidget />);
  expect(screen.getByRole('button', { name: 'üóíÔ∏è' })).toBeInTheDocument();
});

test('–≤—ñ–¥–∫—Ä–∏–≤–∞—î –ø–∞–Ω–µ–ª—å –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É', () => {
  render(<QuickNotesWidget />);
  fireEvent.click(screen.getByRole('button', { name: 'üóíÔ∏è' }));
  expect(screen.getByText('üìå –®–≤–∏–¥–∫—ñ –Ω–æ—Ç–∞—Ç–∫–∏')).toBeInTheDocument();
});

test('–ø–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –Ω–æ—Ç–∞—Ç–æ–∫', () => {
  render(<QuickNotesWidget />);
  fireEvent.click(screen.getByRole('button', { name: 'üóíÔ∏è' }));
  expect(screen.getByText('–ù–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö –Ω–æ—Ç–∞—Ç–æ–∫')).toBeInTheDocument();
});

test('–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ª–∏—à–µ —É–ª—é–±–ª–µ–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏', () => {
  const mockNotes = [
    { id: 1, text: 'Test A', favorite: true, category: '—Ä–æ–±–æ—Ç–∞', created: '2023-01-01' },
    { id: 2, text: 'Test B', favorite: false, category: '–Ω–∞–≤—á–∞–Ω–Ω—è', created: '2023-01-02' }
  ];
  localStorage.setItem('notes', JSON.stringify(mockNotes));

  render(<QuickNotesWidget />);
  fireEvent.click(screen.getByRole('button', { name: 'üóíÔ∏è' }));

  expect(screen.getByText('Test A')).toBeInTheDocument();
  expect(screen.queryByText('Test B')).not.toBeInTheDocument();
});

test('–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —î fileUrl', () => {
  const mockNotes = [
    { id: 3, text: 'Photo note', favorite: true, fileUrl: 'http://example.com/pic.jpg', created: '2023-03-03', category: '—ñ–Ω—à–µ' }
  ];
  localStorage.setItem('notes', JSON.stringify(mockNotes));

  render(<QuickNotesWidget />);
  fireEvent.click(screen.getByRole('button', { name: 'üóíÔ∏è' }));

  expect(screen.getByAltText('note')).toBeInTheDocument();
});

test('–∑–∞–∫—Ä–∏–≤–∞—î –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ ‚úñ', () => {
  render(<QuickNotesWidget />);
  fireEvent.click(screen.getByRole('button', { name: 'üóíÔ∏è' }));
  expect(screen.getByText('üìå –®–≤–∏–¥–∫—ñ –Ω–æ—Ç–∞—Ç–∫–∏')).toBeInTheDocument();
  fireEvent.click(screen.getByRole('button', { name: '‚úñ' }));
  expect(screen.queryByText('üìå –®–≤–∏–¥–∫—ñ –Ω–æ—Ç–∞—Ç–∫–∏')).not.toBeInTheDocument();
});

test('–æ–Ω–æ–≤–ª—é—î –Ω–æ—Ç–∞—Ç–∫–∏ –ø—Ä–∏ –ø–æ–¥—ñ—ó storage', async () => {
  const mockNotes = [
    { id: 4, text: 'Updated note', favorite: true, category: '—ñ–Ω—à–µ', created: '2023-04-04' }
  ];
  localStorage.setItem('notes', JSON.stringify(mockNotes));

  render(<QuickNotesWidget />);
  await act(() => {
    window.dispatchEvent(new Event('storage'));
  });

  fireEvent.click(screen.getByRole('button', { name: 'üóíÔ∏è' }));
  expect(screen.getByText('Updated note')).toBeInTheDocument();
});

test('—à–≤–∏–¥–∫–∞ –Ω–æ—Ç–∞—Ç–∫–∞ –º–∞—î –∫–ª–∞—Å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', () => {
  const mockNotes = [
    { id: 5, text: '–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞', favorite: true, category: '—Ä–æ–±–æ—Ç–∞', created: '2023-05-05' }
  ];
  localStorage.setItem('notes', JSON.stringify(mockNotes));

  render(<QuickNotesWidget />);
  fireEvent.click(screen.getByRole('button', { name: 'üóíÔ∏è' }));

  const note = screen.getByTestId('quick-note-5');
  expect(note).toHaveClass('—Ä–æ–±–æ—Ç–∞');
});

