// Achievements.unit.test.js
import { buildAchievementsList } from '../src/Achievements.logic';

describe('Achievements ‚Äì –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–∂–Ω–æ—ó –∞—á–∏–≤–∫–∏', () => {
  const find = (arr, match) => arr.find(a => a.text.includes(match));

  test('üìì –°—Ç–≤–æ—Ä–∏—Ç–∏ 1, 5, 10, 50 –Ω–æ—Ç–∞—Ç–æ–∫', () => {
    const list = buildAchievementsList({ notes: Array(50) });
    expect(find(list, '1 –Ω–æ—Ç–∞—Ç–∫—É')?.current).toBe(50);
    expect(find(list, '5 –Ω–æ—Ç–∞—Ç–æ–∫')?.current).toBe(50);
    expect(find(list, '10 –Ω–æ—Ç–∞—Ç–æ–∫')?.current).toBe(50);
    expect(find(list, '50 –Ω–æ—Ç–∞—Ç–æ–∫')?.current).toBe(50);
  });

  test('üìÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ 1 —ñ 10 –ø–æ–¥—ñ–π', () => {
    const events = { '2024-01-01': Array(10).fill(1) };
    const list = buildAchievementsList({ calendarEvents: events });
    expect(find(list, '1 –ø–æ–¥—ñ—é')?.current).toBe(10);
    expect(find(list, '10 –ø–æ–¥—ñ–π')?.current).toBe(10);
  });

  test('üéØ –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–≤–∏—á–∫—É 1, 7, 21 –¥–µ–Ω—å', () => {
    const habits = [
      { log: { a: true } },
      { log: Object.fromEntries(Array(7).fill(null).map((_, i) => [i, true])) },
      { log: Object.fromEntries(Array(21).fill(null).map((_, i) => [i, true])) },
    ];
    const list = buildAchievementsList({ habits });
    expect(find(list, '1 –¥–µ–Ω—å')?.current).toBe(1);
    expect(find(list, '7 –¥–Ω—ñ–≤')?.current).toBe(2);
    expect(find(list, '21 –¥–µ–Ω—å')?.current).toBe(1);
  });


  test('üåü –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–∏–π –º–∞–ª—é–Ω–æ–∫', () => {
    const list = buildAchievementsList({ inspo: [{}] });
    expect(find(list, '–ø–µ—Ä—à–∏–π –º–∞–ª—é–Ω–æ–∫')?.current).toBe(1);
  });

  test('üåà –ó–±–µ—Ä–µ–≥—Ç–∏ 5 —ñ 10 –º—É–¥–±–æ—Ä–¥—ñ–≤', () => {
    const list = buildAchievementsList({ inspo: Array(10) });
    expect(find(list, '5 –º—É–¥–±–æ—Ä–¥—ñ–≤')?.current).toBe(10);
    expect(find(list, '10 –º—É–¥–±–æ—Ä–¥—ñ–≤')?.current).toBe(10);
  });

  test('üìö –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ 5 –∫–Ω–∏–≥', () => {
    const list = buildAchievementsList({ savedBooks: Array(5).fill({ status: 'read' }) });
    expect(find(list, '5 –∫–Ω–∏–≥')?.current).toBe(5);
  });

  test('üé¨ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ 5 —Ñ—ñ–ª—å–º—ñ–≤', () => {
    const list = buildAchievementsList({ savedMovies: Array(5).fill({ status: 'watched' }) });
    expect(find(list, '5 —Ñ—ñ–ª—å–º—ñ–≤')?.current).toBe(5);
  });

  test('üåç –í—ñ–¥–≤—ñ–¥–∞—Ç–∏ 1, 5, 10 –∫—Ä–∞—ó–Ω', () => {
    const list = buildAchievementsList({ visitedCountries: Array(10) });
    expect(find(list, '1 –∫—Ä–∞—ó–Ω—É')?.current).toBe(10);
    expect(find(list, '5 –∫—Ä–∞—ó–Ω')?.current).toBe(10);
    expect(find(list, '10 –∫—Ä–∞—ó–Ω')?.current).toBe(10);
  });

  test('‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏ 1, 5, 10 –º—Ä—ñ–π', () => {
    const list = buildAchievementsList({ dreams: Array(10).fill({ completed: true }) });
    expect(find(list, '1 –º—Ä—ñ—é')?.current).toBe(10);
    expect(find(list, '5 –º—Ä—ñ–π')?.current).toBe(10);
    expect(find(list, '10 –º—Ä—ñ–π')?.current).toBe(10);
  });

  test('üõí –î–æ–¥–∞—Ç–∏ 10, 25, 50 –±–∞–∂–∞–Ω—å —É —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', () => {
    const list = buildAchievementsList({ shoppingList: Array(50) });
    expect(find(list, '10 –±–∞–∂–∞–Ω—å')?.current).toBe(50);
    expect(find(list, '25 –±–∞–∂–∞–Ω—å')?.current).toBe(50);
    expect(find(list, '50 –±–∞–∂–∞–Ω—å')?.current).toBe(50);
  });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É:
// npm test Achievements.unit.test.js