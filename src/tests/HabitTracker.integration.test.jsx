import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import HabitTracker from '../HabitTracker';

// üõ† –ú–æ–∫ –¥–ª—è recharts (ResizeObserver)
beforeAll(() => {
  global.ResizeObserver = class {
    observe() {}
    unobserve() {}
    disconnect() {}
  };
});

beforeEach(() => {
  localStorage.clear();
  jest.useFakeTimers();
});

afterEach(() => {
  jest.useRealTimers();
});

test('–¥–æ–¥–∞—î –Ω–æ–≤—É –∑–≤–∏—á–∫—É —ñ –ø–æ–∫–∞–∑—É—î —ó—ó –≤ —Ç–∞–±–ª–∏—Ü—ñ', () => {
  render(<HabitTracker />);
  fireEvent.change(screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞'), { target: { value: '–¢–µ—Å—Ç–æ–≤–∞ –∑–≤–∏—á–∫–∞' } });
  fireEvent.click(screen.getByRole('button', { name: '‚ûï' }));
  expect(screen.getByText('–¢–µ—Å—Ç–æ–≤–∞ –∑–≤–∏—á–∫–∞')).toBeInTheDocument();
});
  
  

test('–ø–æ–∫–∞–∑—É—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ –Ω–µ—Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å', () => {
  render(<HabitTracker />);
  fireEvent.change(screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞'), { target: { value: '–ó–≤–∏—á–∫–∞' } });
  fireEvent.click(screen.getByRole('button', { name: '‚ûï' }));

  const notTodayCell = screen.getAllByRole('cell')
    .flatMap(cell => Array.from(cell.querySelectorAll('.habit-circle')))
    .find(circle => circle.title === '–ú—ñ—Ç–∫–∏ –º–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –ª–∏—à–µ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ');

  fireEvent.click(notTodayCell);
  expect(screen.getByText(/–º—ñ—Ç–∫–∏ –º–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –ª–∏—à–µ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ/i)).toBeInTheDocument();
});

test('—Ä–µ–¥–∞–≥—É—î –Ω–∞–∑–≤—É –∑–≤–∏—á–∫–∏', () => {
  render(<HabitTracker />);
  fireEvent.change(screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞'), { target: { value: '–°—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞' } });
  fireEvent.click(screen.getByRole('button', { name: '‚ûï' }));

  fireEvent.click(screen.getByRole('button', { name: '‚úèÔ∏è' }));
  const input = screen.getByDisplayValue('–°—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞');
  fireEvent.change(input, { target: { value: '–ù–æ–≤–∞ –Ω–∞–∑–≤–∞' } });
  fireEvent.keyDown(input, { key: 'Enter', code: 'Enter' });

  expect(screen.getByText('–ù–æ–≤–∞ –Ω–∞–∑–≤–∞')).toBeInTheDocument();
});

test('–≤–∏–¥–∞–ª—è—î –∑–≤–∏—á–∫—É', () => {
  render(<HabitTracker />);
  fireEvent.change(screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞'), { target: { value: '–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è' } });
  fireEvent.click(screen.getByRole('button', { name: '‚ûï' }));
  fireEvent.click(screen.getByRole('button', { name: '‚ùå' }));

  expect(screen.queryByText('–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è')).not.toBeInTheDocument();
});

test('–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö –∑–≤–∏—á–æ–∫ —ñ –≤–∏–±–∏—Ä–∞—î –æ–¥–Ω—É', () => {
  render(<HabitTracker />);
  fireEvent.click(screen.getByRole('button', { name: 'üìã' }));
  fireEvent.click(screen.getByText('–ü–∏—Ç–∏ –≤–æ–¥—É'));

  expect(screen.getByDisplayValue('–ü–∏—Ç–∏ –≤–æ–¥—É')).toBeInTheDocument();
});

test('–∑–±–µ—Ä—ñ–≥–∞—î –∑–≤–∏—á–∫—É –≤ localStorage', () => {
  render(<HabitTracker />);
  fireEvent.change(screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞'), { target: { value: '–õ–æ–∫–∞–ª—å–Ω–∞' } });
  fireEvent.click(screen.getByRole('button', { name: '‚ûï' }));

  const stored = JSON.parse(localStorage.getItem('habits'));
  expect(stored[0].name).toBe('–õ–æ–∫–∞–ª—å–Ω–∞');
});

test('–∑–º—ñ–Ω—é—î —Ç–∏–∂–¥–µ–Ω—å –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ ‚ñ∂', () => {
  render(<HabitTracker />);
  const labelBefore = screen.getByText(/‚Äì/).textContent;
  fireEvent.click(screen.getByRole('button', { name: '‚ñ∂' }));
  const labelAfter = screen.getByText(/‚Äì/).textContent;

  expect(labelAfter).not.toBe(labelBefore);
});
  
  

test('—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç HabitChart', () => {
  render(<HabitTracker />);
  expect(screen.getByText(/–ø—Ä–æ–≥—Ä–µ—Å –∑–∞ —Ç–∏–∂–¥–µ–Ω—å/i)).toBeInTheDocument();
});
