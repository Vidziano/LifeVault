import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import HabitTracker from '../HabitTracker';

beforeAll(() => {
  global.ResizeObserver = class {
    observe() {}
    unobserve() {}
    disconnect() {}
  };
});

beforeEach(() => {
  localStorage.clear();
});

test('–¥–æ–¥–∞—î –Ω–æ–≤—É –∑–≤–∏—á–∫—É –≤—Ä—É—á–Ω—É', () => {
  render(<HabitTracker />);
  const input = screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞');
  fireEvent.change(input, { target: { value: '–¢–µ—Å—Ç–æ–≤–∞ –∑–≤–∏—á–∫–∞' } });
  fireEvent.click(screen.getByText('‚ûï'));
  expect(screen.getByText('–¢–µ—Å—Ç–æ–≤–∞ –∑–≤–∏—á–∫–∞')).toBeInTheDocument();
});

test('–¥–æ–¥–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—É –∑–≤–∏—á–∫—É', () => {
  render(<HabitTracker />);
  fireEvent.click(screen.getByText('üìã'));
  fireEvent.click(screen.getByText('–ü–∏—Ç–∏ –≤–æ–¥—É'));
  fireEvent.click(screen.getByText('‚ûï'));
  expect(screen.getByText('–ü–∏—Ç–∏ –≤–æ–¥—É')).toBeInTheDocument();
});

test('–ø–µ—Ä–µ–º–∏–∫–∞—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤–∏—á–∫–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ', () => {
  render(<HabitTracker />);
  const input = screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞');
  fireEvent.change(input, { target: { value: '–ú—ñ—Ç–∫–∞' } });
  fireEvent.click(screen.getByText('‚ûï'));

  const circle = screen.getAllByTitle('').find(el => el.className.includes('habit-circle'));
  fireEvent.click(circle);

  expect(circle).toHaveClass('done');
});

test('–Ω–µ –¥–æ–∑–≤–æ–ª—è—î –º—ñ—Ç–∏—Ç–∏ —ñ–Ω—à—ñ –¥–Ω—ñ ‚Äî –ø–æ–∫–∞–∑—É—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è', async () => {
  render(<HabitTracker />);
  const input = screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞');
  fireEvent.change(input, { target: { value: '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞—Ç–∞' } });
  fireEvent.click(screen.getByText('‚ûï'));

  const allCells = screen.getAllByTitle(/–ú—ñ—Ç–∫–∏ –º–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –ª–∏—à–µ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ/);
  if (allCells.length > 0) {
    fireEvent.click(allCells[0]);
    await waitFor(() => {
      expect(screen.getByText('‚ùå –ú—ñ—Ç–∫–∏ –º–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –ª–∏—à–µ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')).toBeInTheDocument();
    });
  }
});

test('–≤–∏–¥–∞–ª—è—î –∑–≤–∏—á–∫—É', () => {
  render(<HabitTracker />);
  const input = screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞');
  fireEvent.change(input, { target: { value: '–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è' } });
  fireEvent.click(screen.getByText('‚ûï'));
  fireEvent.click(screen.getByText('‚ùå'));
  expect(screen.queryByText('–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è')).not.toBeInTheDocument();
});

test('—Ä–µ–¥–∞–≥—É—î –Ω–∞–∑–≤—É –∑–≤–∏—á–∫–∏', () => {
  render(<HabitTracker />);
  const input = screen.getByPlaceholderText('–ù–æ–≤–∞ –∑–≤–∏—á–∫–∞');
  fireEvent.change(input, { target: { value: '–†–µ–¥–∞–≥–æ–≤–∞–Ω–∞' } });
  fireEvent.click(screen.getByText('‚ûï'));

  fireEvent.click(screen.getByText('‚úèÔ∏è'));
  const editInput = screen.getByDisplayValue('–†–µ–¥–∞–≥–æ–≤–∞–Ω–∞');
  fireEvent.change(editInput, { target: { value: '–û–Ω–æ–≤–ª–µ–Ω–æ' } });
  fireEvent.blur(editInput);

  expect(screen.getByText('–û–Ω–æ–≤–ª–µ–Ω–æ')).toBeInTheDocument();
});

test('calculateProgress –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ', () => {
  const weekDates = ['2024-01-01','2024-01-02','2024-01-03','2024-01-04','2024-01-05','2024-01-06','2024-01-07'];
  const log = {
    '2024-01-01': true,
    '2024-01-02': true,
    '2024-01-03': true,
    '2024-01-04': true,
    '2024-01-05': true,
    '2024-01-06': true,
    '2024-01-07': true
  };
  const calculateProgress = (log) => {
    const checked = weekDates.filter(date => log[date]).length;
    const percent = Math.round((checked / 7) * 100);
    let message = '';
    if (percent === 100) message = 'üí™ –Ü–¥–µ–∞–ª—å–Ω–æ!';
    else if (percent >= 80) message = 'üî• –ú–æ–ª–æ–¥–µ—Ü—å!';
    else if (percent >= 50) message = 'üëè –í–ø–µ–≤–Ω–µ–Ω–æ –Ω–∞–±–ª–∏–∂–∞—î—à—Å—è –¥–æ –º–µ—Ç–∏';
    else if (percent > 0) message = 'üôÇ –ü–æ—á–∞—Ç–æ–∫ —î!';
    else message = 'üîÑ –ü–æ—á–Ω–∏ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –∑ –Ω–æ–≤–æ—ó –∑–≤–∏—á–∫–∏';
    return { count: checked, percent, message };
  };

  const result = calculateProgress(log);
  expect(result.count).toBe(7);
  expect(result.percent).toBe(100);
  expect(result.message).toBe('üí™ –Ü–¥–µ–∞–ª—å–Ω–æ!');
});

test('–ø–µ—Ä–µ–º–∏–∫–∞—î –≤–∏–¥–∏–º—ñ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö –∑–≤–∏—á–æ–∫', () => {
  render(<HabitTracker />);
  const toggleButton = screen.getByText('üìã');
  fireEvent.click(toggleButton);
  expect(screen.getByText('–ü–∏—Ç–∏ –≤–æ–¥—É')).toBeInTheDocument();
  fireEvent.click(toggleButton);
  expect(screen.queryByText('–ü–∏—Ç–∏ –≤–æ–¥—É')).not.toBeInTheDocument();
});

test('–ø–µ—Ä–µ–º–∏–∫–∞—î —Ç–∏–∂–Ω—ñ –≤–ø–µ—Ä–µ–¥ —ñ –Ω–∞–∑–∞–¥', () => {
    render(<HabitTracker />);
    const label = screen.getByText(/—Ç—Ä–∞–≤–Ω—è/i).textContent;
    fireEvent.click(screen.getByText('‚ñ∂'));
    const updatedLabel = screen.getByText(/—Ç—Ä–∞–≤–Ω—è|—á–µ—Ä–≤–Ω—è/i).textContent;
    expect(updatedLabel).not.toEqual(label);
    fireEvent.click(screen.getByText('‚óÄ'));
    expect(screen.getByText(/—Ç—Ä–∞–≤–Ω—è/i)).toBeInTheDocument();
  });
